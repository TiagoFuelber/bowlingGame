import { useMemo, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import getFrames from '../application/getFrames'
import styles from '../styles/Home.module.css'
import getPointsForFrame from '../application/getPointsForFrame'
import getCurrentFrameIndex from '../application/getCurrentFrameIndex.ts'
import getRemainingPins from '../application/getRemainingPins'
import Frame, { IFrame, IRoll } from '../components/Frame'
import isStrike from '../application/isStrike'
import isSpare from '../application/isSpare'

export default function Home() {
  const [rolls, setRolls] = useState<IRoll[]>([]);

  const frames = getFrames(rolls);
  const currentFrameIndex = useMemo(() => getCurrentFrameIndex(rolls), [rolls]);
  const currentFrame = frames[currentFrameIndex];
  const isLastFrame = currentFrameIndex === 9;
  const [roll1, roll2] = currentFrame;
  const remainingPins = getRemainingPins((roll2 || roll1) as number);

  const onClickRoll = (pins: number) => {
    setRolls(state => {
      const newState = [...state, pins];
      if (pins === 10 && !isLastFrame) newState.push(0);
      return [...newState];
    });
  }

  const resetGame = () => setRolls([]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Bowling Game
        </h1>

       <div className={styles.framesContainer}>
          {frames.map((frame, index) => {
            return (
              <Frame
                key={`frame-${index}`}
                frame={frame as IFrame}
                pointsForFrame={getPointsForFrame(index, frames as IFrame[])}
                showLastRoll={index === 9 && (isStrike(roll1) || isSpare(roll1, roll2))}
              />
            );
          })}
       </div>
        

        <div>
          {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            .map(pins => (
              <button
                key={pins}
                className={styles.button}
                disabled={remainingPins < pins}
                onClick={() => onClickRoll(pins)}
              >
                {pins}
              </button>
            ))}
          <button className={styles.button} onClick={resetGame}>Reset game</button>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
